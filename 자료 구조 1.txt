스택  인터럽트가 유명함 
LIFO (Last In First Out)=============================
전위 표기법 +ab
중위 표기법 a+b
후위 표기법 ab+

2*(4+5)
후위 표기법으로 하면
=2*(45+)
=2(45+)*
=245+*
전위 표기법으로 하면
=2*(+45)
=*2(+45)
=*2+45)

괄호가 없으면 다른 문제가 된다

2*4+5
후위 표기법으로 하면
=24*+5
=24*5+

A+B*C-D
중위 표기법->후위 표기법
=A+(B*C)-D
=(A+(B*C))-D
=((A+(B*C))-D)
=((A+BC*)-D)
=(ABC*+-D)
=ABC*+D-

3+4*2-5 
중위->후위 표기법
=3+42*-5
=342*+-5
=342*+5-

(A+B)*(C-D)
중위->후위 표기법
=(A+B)(C-D)*
=(AB+)(CD-)*
=AB+CD-*

A+B*C-D
중위->후위
=A+(B*C)-D
=(A+BC*)-D
=(ABC*+ -D)
=ABC*+D-

*+AB-CD
전위->중위
=*(+AB)(-CD)
=(+AB)*(-CD)
=(A+B)*(C-D)
=A+B*C-D

*+AB-CD
전위->후위
전위->중위->후위
=*(+AB)(-CD)
=(+AB)*(-CD)
=(A+B)*(C-D)
=(AB+)(CD-)*
=AB+CD-*

X=A/B*(C+D)+E
중위->후위,중위->전위  둘다
전위
=X=(A/B)*(+CD)+E
=X=(*/AB+CD)+E
=X=+*/AB+CDE
==X+*/AB+CDE
후위
=X=A/B*(DC+)+E
=X=AB/DC+*E+
=XAB/DC+*E=

큐 FIFO(First In First Out)=================================
프린트 
리어 
데큐 
삽입과 삭제가 양쪽 끝에서 모두 발생할 수 있는 자료 구조이다
특징
Stack과 Queue의 장점만 따서 구성한 것




트리
디그리 : 차수로 각 노드애서 뻗어 나온 가지의 수
단말 노드  :자식이 없는 노드 즉,차수가0인 노드
비단말 노드 : 자식이 하나라도 있는 노드 차수가 0이 아닌 노드
조상 노드 : 임의의 노드에서 근 노드에 이르는 경로상에 있는 노드들
자식 노드 어떤 노드에 연결되어 있는 노드


이전 트리의 순회
전위 순회   루트 -> 왼쪽 서브 트리 방문 -> 오른쪽 서브 트리 방운
중위 순회   왼쪽 서브 트리 방문 ->  루트  -> 오른쪽 서브 트리 방운
후위 순회   왼쪽 서브 트리 방문 -> 오른쪽 서브 트리 방운 ->루트  


그래프
그래프와 관련된 용어
정점
간섭
인접 정점
진입 차수
진출 차수
정점의 차수
차수





                                  객체지향개념


package    패키지
   public   퍼블릭
      protected   프로텍티
         default   디폴트
            private    프라이빗





String =null
boolean = false
int = 0



클래스 객체    
객체 = 인스턴스

클래스명 참조변수명;
참조변수명 = new클래스명();
=
Tv t
t=new Tv();


Tv t=new Tv();
Tv t2=new Tv();
t2=t1;


java 
(Refactor
rename)  이름변경



변수		하나의 데이터만 저장
배열		같은 타입의 여러 데이터 저장
구조체		타입에 관계없이 서로 관련되 데이터를 저장
클래스		데이터와 함수의 결합(구조체+함수)

SAM
iSAM
VSAM
HHB
NBB
RBB

클래스 변수		'클래스이름.클래스변수명'			static
인스턴스 변수		'참조변수.인스턴스변수명'
지역 변수 (로컬 변수)	


           매개변수	
int add(int a,int b)


반환값이 없는 경우 리턴타입 대신 void를 사용한다
리턴값은 없거나 1개

return문
반환값이 없는 경우 
return;
반환값이 있는 경우
return 반환값;
반환값이 있는 메서드는 모든 경우에 return문이 있어야 한다




 변수의 종류	  선언위치	          생성 시기
-------------         ------------          ------------------------------
클래스 변수	클래스 영역	클래스가 메모리에 올라갈 때
인스턴스 변수	클래스 영역	인스턴스 생성시
지역 변수		메서드 영역	변수 선언문 수행시


삽입 정렬
버블 정렬
선택 정렬



케이블 리피터 허브 (물리계층) 비트
MAC    브리지 스위치 이더넷( 데이터 계층) 프레임
라우터    패킷(네트워크 계층) IP
TCP는 신뢰성, 연결지향적  UDP 는 비신뢰성, 비연결성 ,실시간 (전송계층)
TCP/IP(세션 계층)
TEXT GIF JPG(표현 계층)
HTTP,FTP,SMTP,POP3,IMAP,Telnet   입출력(I/O) (응용 계층)


상속 (inheritance)
상속이란?
-기존의 클래스를 재사용해서 새로운 클래스를 작성하는 것
-두 클래스를 조상과 자손으로 관계를 맺어주는 것
class 자속클래스 extends 조상클래스{
	//...
}
class point {
int x;
int y;
}

class porint3D{
int x;
int y;
}
class point3D extends point{
int z;
}

포함(composite)이란?
-한 클래스의 맴버변수로 다른 클래스를 선언하는 것
-작은 단위의 클래스를 먼저 만들고, 이 들을 조합해서 하나의 커다란 클래스를 만든다.

this-인스턴스